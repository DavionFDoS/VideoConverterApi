@using VideoConverterApi.Enums
@using VideoConverterApi.Models
@inject HttpClient client
@inject IJSRuntime JsRuntime

<h3>ConvertToAVI</h3>
<br />

<button @onclick="ToggleAdvancedSettings">Открыть расширенные настройки</button>
<br />

@if (_showAdvancedSettings)
{
    <h5>Video Codec</h5>
    <select @bind="_selectedVideoCodec">
        @foreach (var codec in Enum.GetValues(typeof(AVICompatibleVideoCodecs)))
        {
            <option value="@codec">@codec</option>
        }
    </select>

    <h5>Audio Codec</h5>
    <select @bind="_selectedAudioCodec">
        @foreach (var codec in Enum.GetValues(typeof(AVICompatibleAudioCodecs)))
        {
            <option value="@codec">@codec</option>
        }
    </select>

    <h5>Video Bitrate</h5>
    <input type="number" @bind="_videoBitrate" />
    <label>bits/s</label>

    <h5>Audio Bitrate</h5>
    <input type="number" @bind="_audioBitrate" />
    <label>bits/s</label>

    <h5>Quality Value (0 - 10)</h5>
    <input type="number" @bind="_qv" />

    <h5>Preset</h5>
    <select @bind="_selectedPreset">
        @foreach (var preset in Enum.GetValues(typeof(Presets)))
        {
            <option value="@preset">@preset</option>
        }
    </select>
    <br />
}

<div>
    <button type="button" class="btn btn-primary" @onclick="ConvertVideo" disabled="@_isConverting">
        @if (_isConverting)
        {
            <span class="spinner-border spinner-border-sm"></span>
        }
        else
        {
            <span>Конвертировать</span>
        }
    </button>
</div>

@if (_isConverting)
{
    <div class="loading-screen">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Видео конвертируется...</p>
    </div>
}

@if (_errors.Count > 0)
{
    <h2>Errors</h2>
    <ul class=" text-danger">
        @foreach (var error in _errors)
        {
            <li>@error</li>
        }
    </ul>
}

@code {

    [Parameter]
    public string? InputFileName { get; set; }

    private bool _showAdvancedSettings;
    private bool _isConverting = false;
    private AVICompatibleVideoCodecs _selectedVideoCodec;
    private AVICompatibleAudioCodecs _selectedAudioCodec;
    private int _videoBitrate;
    private int _audioBitrate;
    private int _qv;
    private Presets _selectedPreset;
    private string _apiBaseURL = "https://localhost:44337";
    private string _directoryPath = @"C:\Users\Matvey\source\repos\VideoConverterApi\VideoConverterApi\Videos\Uploads\";
    private List<string> _errors = new();

    private void ToggleAdvancedSettings()
    {
        _showAdvancedSettings = !_showAdvancedSettings;
    }

    private async Task ConvertVideo()
    {
        _isConverting = true;

        if (_showAdvancedSettings)
        {
            var arguments = new ConvertToAVIArguments
                {
                    InputFileName = InputFileName,
                    AVICompatibleVideoCodecs = _selectedVideoCodec,
                    AVICompatibleAudioCodecs = _selectedAudioCodec,
                    VideoBitrate = _videoBitrate,
                    AudioBitrate = _audioBitrate,
                    Preset = _selectedPreset,
                    Qv = _qv
                };

            var response = await client.PostAsJsonAsync($"{_apiBaseURL}/converttoaviwitharguments", arguments);

            if (response.IsSuccessStatusCode)
            {
                string content = await response.Content.ReadAsStringAsync();
                var outputFileName = content.Substring(content.IndexOf(':') + 1).Replace("\"", "").Replace("}", "").Replace("Videos/Uploads/", "");
                string downloadUrl = $"{_apiBaseURL}/download?filePath={_directoryPath}{outputFileName}";
                _errors.Add(downloadUrl);

                // Trigger the download in the browser
                await JsRuntime.InvokeAsync<object>("blazorOpen", downloadUrl, "_blank");
            }
            else
            {
                _errors.Add(response.StatusCode.ToString());
            }

            _isConverting = false;
        }
        else
        {
            var arguments = new InputFileArguments
                {
                    InputFileName = InputFileName
                };

            var response = await client.PostAsJsonAsync($"{_apiBaseURL}/converttoaviwithnoarguments", arguments);

            if (response.IsSuccessStatusCode)
            {
                string content = await response.Content.ReadAsStringAsync();
                var outputFileName = content.Substring(content.IndexOf(':') + 1).Replace("\"", "").Replace("}", "").Replace("Videos/Uploads/", "");
                string downloadUrl = $"{_apiBaseURL}/download?filePath={_directoryPath}{outputFileName}";
                _errors.Add(downloadUrl);

                // Trigger the download in the browser
                await JsRuntime.InvokeAsync<object>("blazorOpen", downloadUrl, "_blank");
            }
            else
            {
                _errors.Add(response.StatusCode.ToString());
            }

            _isConverting = false;
        }
    }
}
